@function column-value($cols) {
   @if ($cols != 'auto' or $cols != auto) {
      @return $cols * $block-width;
   }

   @return $cols;
}

@function offset-value($cols) {
   @return calc((#{$cols} * #{$block-width}) + (#{$grid-gutter} / 2));
}

@mixin column($cols, $center-column: 'false') {
   $value: column-value($cols);

   flex: 0 0 $value;
   margin-bottom: $spacing-4;
   margin-left: $grid-gutter / 2;
   margin-right: $grid-gutter / 2;
   margin-top: $spacing-4;
   max-width: calc(#{$value} - #{$grid-gutter});
   min-height: 1px;
   position: relative;
}

@mixin container() {
   margin-left: auto;
   margin-right: auto;
   padding-left: $grid-gutter / -2;
   padding-left: $grid-gutter / -2;
   width: 100%;
}

@mixin row() {
   align-content: flex-start;
   align-items: flex-start;
   display: flex;
   flex-direction: row;
   flex-wrap: wrap;
   justify-content: flex-start;
}

.container {
   @include container;

   @include property {
      &locked {
         @include container;

         max-width: $browser-max-size;
      }
   }
}

.row {
   @include row;

   @include property {
      &center {
         @include row;

         justify-content: center;
      }

      &column {
         @include row;

         flex-direction: column;
      }
   }

   .row {
      margin-left: -($grid-gutter / 2);
      margin-right: -($grid-gutter / 2);
   }
}

.pull {
   @include element {
      &right {
         margin-left: auto;
         margin-right: 0;
      }

      &left {
         margin-left: 0;
         margin-right: auto;
      }
   }
}

.order {
   @include element {
      &last {
         order: ($grid-columns) + 1;
      }

      &first {
         order: -1;
      }
   }
}

@include mq('col') {
   @include column(auto);
}

@for $i from 1 through $grid-columns {
   @include mq('col') {
      @include element {
         &#{$i} {
            @include column($i);

            @if ($i > 2 and $i % 2 == 0) {
               @include property {
                  &centered {
                     $offset-cols: ($grid-columns - $i) / 2;

                     @include column($i);

                     @if ($offset-cols > 0) {
                        margin-left: offset-value($offset-cols);
                     }
                  }
               }
            }
         }
      }
   }

   @include mq('offset') {
      @include element {
         &#{$i} {
            margin-left: offset-value($i) !important;
         }
      }
   }
}
